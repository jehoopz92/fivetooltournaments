{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\jonathane\\\\Desktop\\\\Projects\\\\Apps\\\\fivetooltournaments\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { environment } from '../../environments/environment';\nimport { Stripe } from 'stripe';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductsService {\n  constructor(http) {\n    this.http = http;\n    this.baseURL = environment.BASE_URL;\n\n    if (environment.production) {\n      this.apiKey = environment.API_KEY_PROD;\n    } else {\n      this.apiKey = environment.API_KEY_DEV;\n    }\n  }\n\n  getProducts() {\n    return this.http.get(this.baseURL + 'v1/products', {\n      headers: {\n        Authorization: `Bearer ${this.apiKey}`\n      }\n    });\n  }\n\n  createCheckout(order) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const stripe = new Stripe(_this.apiKey, {\n        apiVersion: '2020-08-27'\n      });\n      const session = yield stripe.checkout.sessions.create({\n        line_items: [{\n          price: '25.00',\n          quantity: 1,\n          description: 'L'\n        }],\n        mode: 'payment',\n        success_url: `https://localhost:4200/`,\n        cancel_url: `https://localhost:4200/#aboutus`\n      }).then(res => {\n        return res;\n      });\n    })();\n  }\n\n}\n\nProductsService.ɵfac = function ProductsService_Factory(t) {\n  return new (t || ProductsService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nProductsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductsService,\n  factory: ProductsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/jonathane/Desktop/Projects/Apps/fivetooltournaments/src/app/services/products.service.ts"],"names":["environment","Stripe","i0","i1","ProductsService","constructor","http","baseURL","BASE_URL","production","apiKey","API_KEY_PROD","API_KEY_DEV","getProducts","get","headers","Authorization","createCheckout","order","stripe","apiVersion","session","checkout","sessions","create","line_items","price","quantity","description","mode","success_url","cancel_url","then","res","ɵfac","ProductsService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,WAAT,QAA4B,gCAA5B;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,eAAN,CAAsB;AACzBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAeP,WAAW,CAACQ,QAA3B;;AACA,QAAIR,WAAW,CAACS,UAAhB,EAA4B;AACxB,WAAKC,MAAL,GAAcV,WAAW,CAACW,YAA1B;AACH,KAFD,MAGK;AACD,WAAKD,MAAL,GAAcV,WAAW,CAACY,WAA1B;AACH;AACJ;;AACDC,EAAAA,WAAW,GAAG;AACV,WAAO,KAAKP,IAAL,CAAUQ,GAAV,CAAc,KAAKP,OAAL,GAAe,aAA7B,EAA4C;AAC/CQ,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAG,UAAS,KAAKN,MAAO;AADhC;AADsC,KAA5C,CAAP;AAKH;;AACKO,EAAAA,cAAc,CAACC,KAAD,EAAQ;AAAA;;AAAA;AACxB,YAAMC,MAAM,GAAG,IAAIlB,MAAJ,CAAW,KAAI,CAACS,MAAhB,EAAwB;AACnCU,QAAAA,UAAU,EAAE;AADuB,OAAxB,CAAf;AAGA,YAAMC,OAAO,SAASF,MAAM,CAACG,QAAP,CAAgBC,QAAhB,CACjBC,MADiB,CACV;AACRC,QAAAA,UAAU,EAAE,CACR;AACIC,UAAAA,KAAK,EAAE,OADX;AAEIC,UAAAA,QAAQ,EAAE,CAFd;AAGIC,UAAAA,WAAW,EAAE;AAHjB,SADQ,CADJ;AAQRC,QAAAA,IAAI,EAAE,SARE;AASRC,QAAAA,WAAW,EAAG,yBATN;AAURC,QAAAA,UAAU,EAAG;AAVL,OADU,EAajBC,IAbiB,CAaXC,GAAD,IAAS;AACf,eAAOA,GAAP;AACH,OAfqB,CAAtB;AAJwB;AAoB3B;;AAtCwB;;AAwC7B7B,eAAe,CAAC8B,IAAhB,GAAuB,SAASC,uBAAT,CAAiCC,CAAjC,EAAoC;AAAE,SAAO,KAAKA,CAAC,IAAIhC,eAAV,EAA2BF,EAAE,CAACmC,QAAH,CAAYlC,EAAE,CAACmC,UAAf,CAA3B,CAAP;AAAgE,CAA7H;;AACAlC,eAAe,CAACmC,KAAhB,GAAwB,aAAcrC,EAAE,CAACsC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAErC,eAAT;AAA0BsC,EAAAA,OAAO,EAAEtC,eAAe,CAAC8B,IAAnD;AAAyDS,EAAAA,UAAU,EAAE;AAArE,CAAtB,CAAtC","sourcesContent":["import { environment } from '../../environments/environment';\r\nimport { Stripe } from 'stripe';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class ProductsService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.baseURL = environment.BASE_URL;\r\n        if (environment.production) {\r\n            this.apiKey = environment.API_KEY_PROD;\r\n        }\r\n        else {\r\n            this.apiKey = environment.API_KEY_DEV;\r\n        }\r\n    }\r\n    getProducts() {\r\n        return this.http.get(this.baseURL + 'v1/products', {\r\n            headers: {\r\n                Authorization: `Bearer ${this.apiKey}`,\r\n            },\r\n        });\r\n    }\r\n    async createCheckout(order) {\r\n        const stripe = new Stripe(this.apiKey, {\r\n            apiVersion: '2020-08-27',\r\n        });\r\n        const session = await stripe.checkout.sessions\r\n            .create({\r\n            line_items: [\r\n                {\r\n                    price: '25.00',\r\n                    quantity: 1,\r\n                    description: 'L',\r\n                },\r\n            ],\r\n            mode: 'payment',\r\n            success_url: `https://localhost:4200/`,\r\n            cancel_url: `https://localhost:4200/#aboutus`,\r\n        })\r\n            .then((res) => {\r\n            return res;\r\n        });\r\n    }\r\n}\r\nProductsService.ɵfac = function ProductsService_Factory(t) { return new (t || ProductsService)(i0.ɵɵinject(i1.HttpClient)); };\r\nProductsService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ProductsService, factory: ProductsService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}